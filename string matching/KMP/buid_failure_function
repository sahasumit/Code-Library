char pattern[10000000];
int F[10000000];
void build_failure_function()
{
    // let m be the length of the pattern
    int m=strlen(pattern);
    F[0] = F[1] = 0; // always true

    for(int i = 2; i <= m; i++)
    {
        // j is the index of the largest next partial match
        // (the largest suffix/prefix) of the string under
        // index i - 1
        int j = F[i - 1];
        for( ; ; )
        {
            // check to see if the last character of string i -
            // - pattern[i - 1] "expands" the current "candidate"
            // best partial match - the prefix under index j
            if(pattern[j] == pattern[i - 1])
            {
                F[i] = j + 1;
                break;
            }
            // if we cannot "expand" even the empty string
            if(j == 0)
            {
                F[i] = 0;
                break;
            }
            // else go to the next best "candidate" partial match
            j = F[j];
        }
    }
}

