#include<iostream>
#include<stdio.h>
#include<string.h>
using namespace std;
#define mx 1000
int arr[mx],tree[mx*3];
void init(int node,int b,int e)
{
	if(b==e)
	{
	 tree[node]=arr[b];
	 return;
     }

	int left=node*2;
	int right=left+1;
	int mid=(b+e)/2;
	init(left,b,mid);
	init(right,mid+1,e);
	tree[node]=tree[left]+tree[right];

}
int query(int node,int b,int e,int x,int y)
{
	if(x>e||b>y)
	return 0;

	if(b>=x&&e<=y)
	return tree[node];
	int left=node*2;
	int right=left+1;
	int mid=(b+e)/2;
	int p1=query(left,b,mid,x,y);
	int p2=query(right,mid+1,e,x,y);
	return p1+p2;


}
void update(int node,int b,int e,int in,int newvalue)
{
	if(in>e||in<b)
	return;
	if(b==e)
	{
		tree[node]=newvalue;
		return;
	}

	int left=node*2;
	int right=left+1;
	int mid=(b+e)/2;
	update(left,b,mid,in,newvalue);
	update(right,mid+1,e,in,newvalue);
	tree[node]=tree[left]+tree[right];

}
int main()
{
	int n;
	cin>>n;
	for(int i=1;i<=n;i++)
	cin>>arr[i];
	//installing query
	init(1,1,n);

	//updating element
	// ender index no in and the update value newvalue
	int in,newvalue;
	cin>>in>>newvalue;
	update(1,1,n,in,newvalue);
	// enter starting and ending position for result
	int x,y;
	cin>>x>>y;
	cout<<query(1,1,n,x,y)<<endl;




}

